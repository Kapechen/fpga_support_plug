"use strict";

const fs     = require("fs");
const fspath = require("path");
const dirs    = require("./dirs");

/**
 * 
 * @param {file path} src  源文件地址路径 Source file address path
 * @param {fold path} dist 目标文件夹路径，如果是已经存在的文件路径则进行复写 Path of the destination folder. If it is an existing file path, overwrite it
 */
function copyFile(src, dist) {
    if (!fs.existsSync(dist)){
        dirs.mkdir(dist);
    }
    if (fs.statSync(dist).isDirectory()) {        
        dist = dist + fspath.sep + fspath.basename(src);
    }
    if (fs.existsSync(src)) {
        var data = fs.readFileSync(src, 'utf8');
        fs.writeFileSync(dist, data, 'utf8');
    }
}
exports.copyFile = copyFile;
function deleteFile(path) {
    if (fs.existsSync(path)) {
        fs.unlinkSync(path);
    }
}
exports.deleteFile = deleteFile;
function pickFile(file_path,extname) {
    let file_list = fs.readdirSync(file_path);
    let output_list = [];
    file_list.filter(function (file) {
        if(fspath.extname(file).toLowerCase() === extname){
            output_list.push(file)
        }
    });
    return output_list;
}
exports.pickFile = pickFile;
function pickAllFile(file_path,extname,output_list) {
    let file_list = fs.readdirSync(file_path);
    for (let i = 0; i < file_list.length; i++) {
        const element = file_list[i];
        if (fs.statSync(`${file_path}/${element}`).isDirectory()) {
            pickAllFile(`${file_path}/${element}`,extname,output_list);
        } else {		
            if(extname.includes(fspath.extname(element).toLowerCase())){
                output_list.push(`${file_path}/${element}`.replace("//","/").replace(/\\/g,"\/"));
            }
        }
    }
}
exports.pickAllFile = pickAllFile;
function pullJsonInfo(JSON_path) {
    let data = fs.readFileSync(JSON_path, 'utf8');
    let prjinfo = JSON.parse(data);
    return prjinfo;
}
exports.pullJsonInfo = pullJsonInfo;
function pushJsonInfo(JSON_path,JSON_data){
    var str = JSON.stringify(JSON_data,null,'\t');
    dirs.mkdir(fspath.dirname(JSON_path));
    fs.writeFileSync(JSON_path, str, 'utf8');
}
exports.pushJsonInfo = pushJsonInfo;
function isHasAttr(obj, attr){
    let tempObj = obj;
    attr = attr.replace(/\[(\w+)\]/g, '.$1');
    attr = attr.replace(/^\./, '');
    let keyArr = attr.split('.');
    for (let i = 0; i < keyArr.length; i++) {
        const element = keyArr[i];
        if (!tempObj) return false;
        if (element in tempObj) {
            tempObj = tempObj[element];
        } else {
            return false;
        }
    }
    return true;
}
exports.isHasAttr = isHasAttr;
function isHasValue(obj, attr, value){
    let tempObj = obj;
    attr = attr.replace(/\[(\w+)\]/g, '.$1');
    attr = attr.replace(/^\./, '');
    let keyArr = attr.split('.');
    for (let i = 0; i < keyArr.length; i++) {
        const element = keyArr[i];
        if (!tempObj) return false;
        if (element in tempObj) {
            tempObj = tempObj[element];
            if (i == keyArr.length - 1 && tempObj != value) {
                return false;
            }
        } else {
            return false;
        }
    }
    return true;
}
exports.isHasValue = isHasValue;